type DeviceInfo = record {
  device_name : text;
  device_uid : text;
  gateway_uid : text;
};
type DeviceRegistrationInput = record {
  device_name : text;
  env_uid : text;
  gateway_uid : text;
};
type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type EnvironmentInfo = record {
  env_manager_principal_id : text;
  env_uid : text;
  env_name : text;
};
type GatewayInfo = record { gateway_name : text; gateway_uid : text };
type GatewayRegistrationInput = record {
  gateway_name : text;
  env_uid : text;
  gateway_uid : text;
};
type Result = variant { Ok : vec DeviceInfo; Err : text };
type Result_1 = variant { Ok : vec GatewayInfo; Err : text };
type Result_2 = variant { Ok : DeviceInfo; Err : text };
type Result_3 = variant { Ok : opt GatewayInfo; Err : text };
type Result_4 = variant { Ok : EnvironmentInfo; Err : text };
type UserProfile = record {
  user_principal_id : text;
  environment_uid : opt text;
};
service : (opt text, text) -> {
  createEnvironment : (EnvironmentCreationInput) -> (EnvironmentCreationResult);
  getDevices : (text) -> (Result);
  getGateways : (text) -> (Result_1);
  getProfile : () -> (UserProfile);
  initGateway : () -> (text);
  registerDevice : (DeviceRegistrationInput) -> (Result_2);
  registerGateway : (GatewayRegistrationInput) -> (Result_3);
  resetEnvironment : () -> (Result_4);
  setEnvironment : (text) -> (Result_4);
}
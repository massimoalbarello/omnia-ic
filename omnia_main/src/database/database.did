type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type GatewayRegistrationInput = record { gateway_name : text; env_uid : text };
type Registeredgateway = record {
  gateway_name : text;
  gateway_ip : text;
  env_uid : text;
};
type RequesterInfo = record { requester_ip : text; timestamp : nat64 };
type Result = variant { Ok : vec text; Err };
type Result_1 = variant { Ok : VirtualPersona; Err };
type Result_2 = variant { Ok : text; Err };
type Result_3 = variant { Ok : opt Registeredgateway; Err : text };
type VirtualPersona = record {
  manager_env_uid : opt text;
  user_env_uid : opt text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
service : {
  createNewEnvironment : (text, EnvironmentCreationInput) -> (
      EnvironmentCreationResult,
    );
  getInitializedGatewaysByIp : (text) -> (Result);
  getVirtualPersona : (text, text) -> (Result_1);
  getVirtualPersonaIfExists : (principal) -> (opt VirtualPersona) query;
  initGatewayWithIp : (text, text) -> (Result_2);
  initNonceToIp : (text, RequesterInfo) -> (opt RequesterInfo);
  registerGatewayInEnvironment : (text, text, GatewayRegistrationInput) -> (
      Result_3,
    );
}
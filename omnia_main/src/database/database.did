type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type EnvironmentInfo = record {
  env_manager_principal_id : text;
  env_uid : text;
  env_name : text;
};
type GatewayInfo = record { gateway_name : text; gateway_uid : text };
type GatewayRegistrationInput = record {
  gateway_name : text;
  env_uid : text;
  gateway_uid : text;
};
type RequesterInfo = record { requester_ip : text; timestamp : nat64 };
type Result = variant { Ok : VirtualPersona; Err };
type Result_1 = variant { Ok : text; Err };
type Result_2 = variant { Ok : opt GatewayInfo; Err : text };
type Result_3 = variant { Ok : EnvironmentInfo; Err : text };
type VirtualPersona = record {
  manager_env_uid : opt text;
  user_env_uid : opt text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
service : {
  createNewEnvironment : (text, EnvironmentCreationInput) -> (
      EnvironmentCreationResult,
    );
  getVirtualPersona : (text, text) -> (Result);
  getVirtualPersonaIfExists : (principal) -> (opt VirtualPersona) query;
  initGateway : (text) -> (Result_1);
  initNonceToIp : (text, RequesterInfo) -> (opt RequesterInfo);
  registerGatewayInEnvironment : (text, text, GatewayRegistrationInput) -> (
      Result_2,
    );
  resetUserFromEnvironment : (text) -> (Result_3);
  setUserInEnvironment : (text, text) -> (Result_3);
}
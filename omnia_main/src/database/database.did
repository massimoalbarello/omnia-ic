type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type InitializedGatewayValue = record { principal_id : text };
type IpChallengeValue = record { requester_ip : text; timestamp : nat64 };
type Result = variant { Ok : vec InitializedGatewayValue; Err : text };
type Result_1 = variant { Ok : VirtualPersonaValue; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type VirtualPersonaValue = record {
  manager_env_uid : opt text;
  user_env_uid : opt text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
service : {
  checkIfVirtualPersonaExists : (text) -> (bool) query;
  createNewEnvironment : (text, EnvironmentCreationInput) -> (
      EnvironmentCreationResult,
    );
  getInitializedGatewaysByIp : (text) -> (Result);
  getVirtualPersona : (text, text) -> (Result_1);
  initGatewayByIp : (text, text) -> (Result_2);
  initNonceToIp : (text, IpChallengeValue) -> ();
}
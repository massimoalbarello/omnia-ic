//// Types ////

//// Environment
// EnvironmentUID is the unique identifier of an environment, in the form of a UUIDv4
type EnvironmentUID = text;

type EnvironmentInfo = record {
  env_manager_principal_id : PrincipalId;
  env_uid : EnvironmentUID;
  env_name : text;
};


//// Gateway
// GatewayUID is the unique identifier of a gateway, in the form of a UUIDv4
type GatewayUID = text;

type GatewayInfo = record { gateway_name : text; gateway_uid : GatewayUID };

//// Device
// DeviceUID is the unique identifier of a device, in the form of a UUIDv4
type DeviceUID = text;

type DeviceInfo = record {
  device_name : text;
  device_uid : DeviceUID;
  gateway_uid : text;
};

type DeviceRegistrationInput = record {
  device_name : text;
  env_uid : EnvironmentUID;
  gateway_uid : GatewayUID;
};


//// User
// PrincipalId is the id of the Principal of a user
type PrincipalId = text;
type StoredUserProfile = record {
  user_principal_id : PrincipalId;
  environment_uid : opt EnvironmentUID;
};

//// Inputs ////

type EnvironmentCreationInput = record { env_name : text };
type GatewayRegistrationInput = record {
  gateway_name : text;
  env_uid : EnvironmentUID;
  gateway_uid : GatewayUID;
};
type GetGatewaysInEnvironmentInput = EnvironmentUID;
type GetDevicesInEnvironmentInput = EnvironmentUID;
type GetUserProfileInput = PrincipalId;

//// Results ////

type EnvironmentCreationResult = record { env_uid : EnvironmentUID; env_name : text };
type MultipleDeviceInfoResult = variant { Ok : vec DeviceInfo; Err : text };
type MultipleGatewayInfoResult = variant { Ok : vec GatewayInfo; Err : text };
type DeviceInfoResult = variant { Ok : DeviceInfo; Err : text };
type GatewayInfoResult = variant { Ok : GatewayInfo; Err : text };
type EnvironmentInfoResult = variant { Ok : EnvironmentInfo; Err : text };
type InitGatewayResult = GatewayUID;

//// Service ////

service : {
  // create a new environment
  // - PrincipalId: the principal id of the manager creating the environment
  createNewEnvironment : (PrincipalId, EnvironmentCreationInput) -> (
      EnvironmentCreationResult,
    );

  // get the gateways registerd in the environment with the given uid
  getGatewaysInEnvironment : (GetGatewaysInEnvironmentInput) -> (MultipleGatewayInfoResult);

  // get the devices registered in the environment with the given uid
  getDevicesInEnvironment : (GetDevicesInEnvironmentInput) -> (MultipleDeviceInfoResult);

  // get the the profile of the user with the given principal id (if it doesn't exist, it will be created)
  getUserProfile : (GetUserProfileInput) -> (StoredUserProfile);

  // generate a new gateway uid, that can be used to register the gateway in the environment
  initGateway : () -> (InitGatewayResult);

  // register a device in the environment
  // - PrincipalId: the principal id of the manager registering the device
  registerDeviceInEnvironment : (PrincipalId, DeviceRegistrationInput) -> (DeviceInfoResult);

  // register a gateway in the environment
  // - PrincipalId: the principal id of the manager registering the gateway
  registerGatewayInEnvironment : (PrincipalId, GatewayRegistrationInput) -> (GatewayInfoResult);

  // remove the user from the environment
  resetUserFromEnvironment : (PrincipalId) -> (EnvironmentInfoResult);

  // set the user in the environment with the given uid
  setUserInEnvironment : (PrincipalId, EnvironmentUID) -> (EnvironmentInfoResult);
}
